[pause_resume]
recover_velocity: 150

[gcode_macro PID_EXTRUDER]
gcode:
  PID_CALIBRATE HEATER=extruder TARGET=210
  SAVE_CONFIG

[gcode_macro PID_BED]
gcode:
  PID_CALIBRATE HEATER=heater_bed TARGET=60
  SAVE_CONFIG

#Cura start g-code
# START_PRINT EXTRUDER_TEMP={material_print_temperature_layer_0} BED_TEMP={material_bed_temperature_layer_0}

# All start end g-codes:
# https://github.com/rootiest/zippy_guides/blob/main/guides/macros.md#slicer-settings


[gcode_macro START_PRINT]
gcode:
   {% set BED_TEMP = params.BED_TEMP|default(65)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}
    M104 S{EXTRUDER_TEMP}
    M190 S{BED_TEMP}
    G28 ;Home
    EXCLUDE_OBJECT_DEFINE
    BED_MESH_CALIBRATE
    G92 E0 ;Reset Extruder
    #G1 Z8.0 F3000 ;Move Z Axis up
    #G1 X115.4 Y4 Z0.28 F5000.0 ;Move to start position
    Smart_Park
    M109 S{EXTRUDER_TEMP}
    Line_Purge
    #G1 X10.4 Y4 Z0.28 F1500.0 E30 ;Draw the purge line
    #G1 Z2.0 F3000 ;Move Z Axis up
    G92 E0  ;Reset Extruder
    G1 F2400 E-0.1

[gcode_macro _UNLOAD_FILAMENT]
gcode:
  M109 S{printer['gcode_macro PRINTER_PARAM'].hotend_temp|int}
  RESPOND TYPE=command MSG="Unloading filament..."
  M83
  G1 E10 F300
  G1 E-15 F3000
  G1 E-22.4700 F2400
  G1 E-6.4200 F1200
  G1 E-3.2100 F720
  G1 E5.0000 F356
  G1 E-5.0000 F384
  G1 E5.0000 F412
  G1 E-5.0000 F440
  G1 E5.0000 F467
  G1 E-5.0000 F495
  G1 E5.0000 F523
  G1 E-5.0000 F3000
  G1 E-15 F3000

[gcode_macro _LOAD_FILAMENT]
gcode:
  M109 S{printer['gcode_macro PRINTER_PARAM'].hotend_temp|int}
  RESPOND TYPE=command MSG="Loading filament..."
  G91
  G1 E100 F180
  G90
  M400

[gcode_macro LOW_TEMP_CHECK]
gcode:
    {% set extruder_temp = params.T|default(200)|float %}
    {% if printer.extruder.target > extruder_temp %}                            # if there is a setpoint for extruder
        {% set extruder_temp = printer.extruder.target %}
    {% endif %}
    {% if printer.extruder.temperature < extruder_temp %}                       # heat to the target
        M118 Heating to {extruder_temp}
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET={extruder_temp}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={extruder_temp}
    {% endif %}

[gcode_macro BEEP]
gcode:
    {% set duration = params.P|default(100)|float %}
    SET_PIN PIN=beeper VALUE=1
    G4 P{duration}
    SET_PIN PIN=beeper VALUE=0


[gcode_macro CANCEL_PRINT]
description: Cancel the current running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
  # Move head and retract only if not already in the pause state and park set to true
  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true' %}
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}
  
  # Turn off heaters
  TURN_OFF_HEATERS
  
  # Clear pause-related settings
  SET_PAUSE_NEXT_LAYER ENABLE=0
  SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
  
  # Disable steppers after parking to avoid rehoming errors
  M84 X Y E ; Disable all steppers but leave Z engaged until movement is complete

  # Call the original CANCEL_PRINT_BASE macro to finish the cancellation process
  CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
variable_extrude: 1.5  # Setting a default extrude amount
gcode:
  PAUSE_BASE
  _TOOLHEAD_PARK_PAUSE_CANCEL
  SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=extrude VALUE={variable_extrude}

[gcode_macro RESUME]
description: Resume the current print
rename_existing: RESUME_BASE
gcode:
  {% if printer['gcode_macro PRINTER_PARAM'].hotend_temp|int != 0 %}
    {% if printer['gcode_macro PRINTER_PARAM'].hotend_temp|int > printer.extruder.temperature %}
      RESPOND TYPE=command MSG="Starting hotend heating..."
      M109 S{printer['gcode_macro PRINTER_PARAM'].hotend_temp|int}
    {% else %}
      RESPOND TYPE=command MSG="Starting hotend heating..."
      M104 S{printer['gcode_macro PRINTER_PARAM'].hotend_temp|int}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=PRINTER_PARAM VARIABLE=hotend_temp VALUE=0
  {% endif %}
  {% if printer["gcode_macro M600"].m600_state != 1 %}
    {% set z_resume_move = printer['gcode_macro PRINTER_PARAM'].z_safe_pause|int %}
    {% if z_resume_move > 2 %}
      {% set z_resume_move = z_resume_move - 2 %}
      G91
      G1 Z-{z_resume_move} F600
      M400
    {% endif %}
  {% endif %}
  {% set E = printer["gcode_macro PAUSE"].extrude|float + 1.0 %}
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY) %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  {% if printer["gcode_macro M600"].m600_state == 1 %}
    {% if printer['gcode_macro M600'].fan1_speed > 0 %}
      {% set s_value = (printer['gcode_macro M600'].fan1_speed * 255 - printer['gcode_macro PRINTER_PARAM'].fan1_min) * 255 / (255 - printer['gcode_macro PRINTER_PARAM'].fan1_min)|float %}
      M106 P1 S{s_value}  G1
      SET_GCODE_VARIABLE MACRO=M600 VARIABLE=fan1_speed VALUE=0
    {% endif %}
    SET_GCODE_VARIABLE MACRO=M600 VARIABLE=m600_state VALUE=0
    SET_IDLE_TIMEOUT TIMEOUT=1800
    RESPOND TYPE=command MSG="action:prompt_end"
  {% else %}
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G91
      G1 E{E} F2100
      G90
      M400
    {% else %}
      RESPOND TYPE=command MSG="Extruder not hot enough!"
    {% endif %}
  {% endif %}
  RESPOND TYPE=command MSG="Resuming printing..."
  RESUME_BASE {get_params}

# Usage: SET_PAUSE_NEXT_LAYER [ENABLE=[0 | 1]] [MACRO=<name>]
[gcode_macro SET_PAUSE_NEXT_LAYER]
description: Enable a pause if the next layer is reached
gcode:
  {% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
  {% set ENABLE = params.ENABLE | default(1) | int != 0 %}
  {% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

# Usage: SET_PAUSE_AT_LAYER [ENABLE=[0 | 1]] [LAYER=<number>] [MACRO=<name>]
[gcode_macro SET_PAUSE_AT_LAYER]
description: Enable/disable a pause if a given layer number is reached
gcode:
  {% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
  {% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined
             else params.LAYER is defined %}
  {% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}
  {% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

# Usage: SET_PRINT_STATS_INFO [TOTAL_LAYER=<total_layer_count>] [CURRENT_LAYER= <current_layer>]
[gcode_macro SET_PRINT_STATS_INFO]
rename_existing: SET_PRINT_STATS_INFO_BASE
description: Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer: { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer  : { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode:
  {% if pause_next_layer.enable %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
    {pause_next_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_NEXT_LAYER ENABLE=0
  {% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
    {pause_at_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_AT_LAYER ENABLE=0
  {% endif %}
  SET_PRINT_STATS_INFO_BASE {rawparams}

##### internal use #####
[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_minimum.x|float %}
  {% set y_park = printer.toolhead.axis_maximum.y|float %}
  {% set z_park_delta = 10.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}


[gcode_macro _CLIENT_EXTRUDE]
description: Extrudes, if the extruder is hot enough
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
  {% set use_fw_retract = (client.use_fw_retract | default(false) | lower == 'true') and (printer.firmware_retraction is defined) %}
  {% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}
  {% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}
  {% set absolute_extrude = printer.gcode_move.absolute_extrude %}
  ##### end of definitions #####
  {% if printer.toolhead.extruder != '' %}
    {% if printer[printer.toolhead.extruder].can_extrude %}
      {% if use_fw_retract %}
        {% if length < 0 %}
          G10
        {% else %}
          G11
        {% endif %}
      {% else %}
        M83
        G1 E{length} F{(speed | float | abs) * 60}
        {% if absolute_extrude %}
          M82
        {% endif %}
      {% endif %}
    {% else %}
      RESPOND TYPE=echo MSG='Extruder not hot enough'
    {% endif %}
  {% endif %}

[gcode_macro _CLIENT_RETRACT]
description: Retracts, if the extruder is hot enough
gcode:
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
  {% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}
  {% set speed = params.SPEED | default(client.speed_retract) | default(35) %}

  _CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}

[gcode_macro PRINT_END]
description: End of printing
variable_machine_depth: 220
gcode:
      G91 ;Relative positioning
      G1 E-2 F2700 ;Retract a bit
      G1 E-2 Z0.2 F2400 ;Retract and raise Z
      G1 X5 Y5 F3000 ;Wipe out
      G1 z50 ;Raise Z more
      G90 ;Absolute positioning
      G1 X0 Y{machine_depth} ;Present print
      M106 S0 ;Turn-off fan
      M104 S0 ;Turn-off hotend
      M140 S0 ;Turn-off bed
      M84 X Y E ;Disable all steppers but Z
      BEEP
 #     UPDATE_DELAYED_GCODE ID=DELAYED_PRINTER_OFF DURATION=60
 #     WLED_ON STRIP=roof PRESET=4

[gcode_macro M600]
description: Filament Change
variable_m600_state: 0
variable_fan1_speed: 0
gcode:
  {% set E = printer["gcode_macro PAUSE"].extrude|default(1.5)|float %}
  {% set y_park = printer.toolhead.axis_minimum.y|float + 10.0 %}
  {% set x_park = printer.toolhead.axis_maximum.x|float - 10.0 %}
  {% set max_z = printer["gcode_macro PRINTER_PARAM"].max_z_position|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% set z_safe = 0.0 %}
  {% if act_z < 48.0 %}
    {% set z_safe = 50.0 - act_z %}
  {% elif act_z < (max_z - 2.0) %}
    {% set z_safe = 2.0 %}
  {% elif act_z < max_z %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  {action_respond_info("z_safe = %s"% (z_safe))}
  SET_GCODE_VARIABLE MACRO=M600 VARIABLE=m600_state VALUE=1
  SET_GCODE_VARIABLE MACRO=PRINTER_PARAM VARIABLE=hotend_temp VALUE={printer.extruder.target}
  SET_GCODE_VARIABLE MACRO=PRINTER_PARAM VARIABLE=z_safe_pause VALUE={z_safe|float}
  RESPOND TYPE=command MSG="Print paused for filament change!"
  PAUSE_BASE
  G91
  {% if "xyz" in printer.toolhead.homed_axes %}
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-1.0 F180
      G1 E-{E} F4000
    {% else %}
      RESPOND TYPE=command MSG="Extruder not hot enough!"
    {% endif %}
    G1 Z{z_safe} F600
    M400
    G90
    G1 X{x_park} Y{y_park} F12000
  {% endif %}
  _UNLOAD_FILAMENT
  M106 P1 S0
  SET_IDLE_TIMEOUT TIMEOUT=900
  RESPOND TYPE=command MSG="action:prompt_begin Filament change detected!"
  RESPOND TYPE=command MSG="action:prompt_text A necessary filament change has been detected. Please replace filament, LOAD it and click RESUME button."
  RESPOND TYPE=command MSG="action:prompt_button UNLOAD FILAMENT|_UNLOAD_FILAMENT|secondary"
  RESPOND TYPE=command MSG="action:prompt_button LOAD FILAMENT|_LOAD_FILAMENT|secondary"
  RESPOND TYPE=command MSG="action:prompt_button PURGE MORE FILAMENT|_PURGE_MORE|secondary"
  RESPOND TYPE=command MSG="action:prompt_footer_button CANCEL PRINT|CANCEL_PRINT|error"
  RESPOND TYPE=command MSG="action:prompt_footer_button IGNORE|RESPOND TYPE=command MSG=action:prompt_end|warning"
  RESPOND TYPE=command MSG="action:prompt_footer_button RESUME|RESUME|primary"
  RESPOND TYPE=command MSG="action:prompt_show"

[gcode_macro PRINTER_PARAM]
description: Store printer parameters for macros
variable_hotend_temp: 0
variable_z_safe_pause: 10.0
variable_max_z_position: 250.0
variable_fan1_speed: 0
gcode:

[idle_timeout]
gcode:
  {% if printer["gcode_macro M600"].m600_state == 1 %}
    RESPOND TYPE=command MSG="Stopping hotend heating..."
    M104 S0
  {% else %}
    TURN_OFF_HEATERS
    M84
  {% endif %}
timeout: 1800

[gcode_macro _PURGE_MORE]
gcode:
  M109 S{printer['gcode_macro PRINTER_PARAM'].hotend_temp|int}
  RESPOND TYPE=command MSG="Purging filament..."
  G91
  G1 E10 F180
  G90
  M400
